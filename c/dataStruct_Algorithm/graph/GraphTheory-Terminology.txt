--------------------------------------------------
Graph :  G = (V, E)
--------------------------------------------------
V : Vertex     
E : Edge

一对顶点(或者叫 顶点对 or 序偶) 是有序的
比如说大楼1层的电梯通常分为左右2排, 左侧 是 上行的电梯， 又侧是 下行的电梯

	如果某人A, 希望从1楼 去往 5楼
	而另一人B, 希望从5楼 去往 1楼

A :  <1,5>  需要在1楼 乘坐 左侧的电梯  
B :  <5,1>  需要在5楼 乘坐 右侧的电梯


有向图 与 无向图
在图G中，如果表示边的顶点对，是有序的，则称G为 有向图 ( Digraph )   用尖括号  序偶 <v1, v2>  表示 有向边
在图G中，如果表示边的顶点对，是无序的，则称G为 无向图 ( undigraph ) 用圆括号       (v1, v2)  表示 无向边



--------------------- 在无向图中 ---------------------
邻接点:
	以 (v1, v2)  表示的 一条 无向边， v1,v2 表示这条边的 端点 (endpoint) , 并称他们为 邻接点 ( adjacent )
	即   v1   是 v2 的1个邻接点
	同时 v2 也是 v1 的1个邻接点

	关联于相同两个顶点的2条或者多条边称为  多重边
	多重边，在生活中很常见, 如:
	有2个顶点 
			v1 : 上海
			v2 : 南京 

有4种出行方式 , 分别对应4条边  e1, e2, e3, e4

              铁路(火车)
e1.	上海  ------------------->   南京

           高速公路(长途车)
e2.	上海  ------------------->   南京

               航空(飞机)
e3.	上海  ------------------->   南京

            国道(自行车/徒步)
e4.	上海  ------------------->   南京


在数据结构中讨论的无向图，是指 <没有> 多重边的 图

某1个端点所关联的边的数量 称为 顶点的度 (degree)

完全图 : 对图中任意2个顶点，都存在1条边 ，则此图为 无向完全图
显然 无向图包含有 n(n-1)/2条边， n是总的顶点的数量



--------------------- 在有向图中 ---------------------
e  : <i,j> 这一条有向边(也称为 弧)

i : 起始端点(始点)  j : 终止端点(终点)

e   是 i 的一条 出边
e 也是 j 的一条 入边

j 是 i 的出边邻接点
i 是 j 的入边邻接点


某1个端点所关联的边的数量 称为 顶点的度 (degree)
这一度 又分为  入度(indegree) 和 出度 (outdegree) , 入度+出度 = 顶点的度


完全图 : 对图中任意2个顶点，都存在方向相反的2条边 ，则此图为 完全图

显然 有向图包含有 n(n-1)条边， n是总的顶点的数量

----------------------------------------------------------------------------------------------------
稠秘图 和 稀疏图
稠秘图 : 当1个图 接近完全图时，  称为 稠秘图( dense graph )
稀疏图 : 当1个图 含有较少的边数，称为 稀疏图( sparse graph )  e < ( n * log N )
                                                                           2


----------------------------------------------------------------------------------------------------
路径 与 路径长度
	从 i --> n 的一条路径 : (i,    j, k, l, m,    n)

	路径长度 : 经过的边的数量就是 路径长度，如上面例子中的 e1(i,j) e2(j,k) e3(k,l) e4(l,m) e5(m,n)   共5条边，那么路径长度 = 5

	简单路径 : 若1条路径上，除开始点 和 结束点可以相同以外， 其余顶点均不相同， 那么这条路径为 简单路径
	           
(开始点 和 结束点 可以相同) 是什么意思呢? 这很像一个旅行的行程
如，我想去云南旅行 :

(开始点)                                   (结束点)
  上海     --> 昆明 --> 大理 --> 丽江 -->    上海

这一条行程的路径中，  开始点 与 结束点 都是相同的


----------------------------------------------------------------------------------------------------
回路 或 环
1条路径上，如果 起始点 == 终止点，那么，此路径称为  回路 / 环(cycle)

起始点 == 终止点 的 <简单>路径 : 被称为 简单回路 或 简单环


----------------------------------------------------------------------------------------------------
连通、连通图 、 连通分量
<无>向图中 ： 
	i --> j 有路径， 称 i 与 j 是连通的
	若图中，任意2个顶点 都是连通的， 则称图G为 连通图   ( connected graph )
	                                 否则图G为 非连通图


----------------------------------------------------------------------------------------------------
<有>向图中 ： 

	i --> j 有路径， 称 <i 到 j 是连通的> ， ***** 但反过来，不一定成立 *****
	若图中，任意2个顶点 都是<双向>连通的， 即对应任取的2个顶点i,j,  都满足 : i -> j 有路径， 同时 j -> i 也有路径
	则称图G为 强连通图   ( strongly connected graph )
	否则图G为 非连通图




----------------------------------------------------------------------------------------------------
邻接矩阵 ( Adjacency Matrix )
矩阵用一个2维数组来存储， 而图用一个2维数组，而且行数 == 列数的  方阵来表示

1) 不带权的  无向图     
	A[i][j] = 1   表示 i 与 j 之间是是用线连起来的， 特别地，当i == j，表示自己 与 自己本身就是 连接的
	A[i][j] = 0   表示 i 与 j 之间没有用线连起来的

2) 不带权的  有向图     
	A[i][j] = 1   表示有一条以i为始点，j为终点的连线, 连接着 i 与 j
	A[i][j] = 0   表示 i 与 j 之间没有用线连起来的


3) 带权的  无向图     
	A[i][j] = w            表示 i 与 j 之间距离是 W
	           ij                                  ij

	A[i][j] = 0            表示 i 与 i 本身之间的距离是 0

	A[i][j] == 无穷大      表示 i 与 j 之间是不连接的


4) 带权的  有向图     
	A[i][j] = w            表示 i 到 j 的距离是 W   , 但是 i,j 互相交换后， ji 之间的距离不一定是 W   , 有点像2地的交通费，上海->南京，坐<高铁>需要150元，但从 南京 -> 上海，做<慢车>只要50元
	           ij                                ij                                                ij

	A[i][j] = 0            表示 i 与 i 本身之间的距离是 0

	A[i][j] == 无穷大      表示 i 与 j 之间是不连接的


----------------------------------------------------------------------------------------------------


// --------------------------------------------------
// Adjacency list  (邻接表)
// --------------------------------------------------
typedef struct ArcNode  // 某一条边 ( Arc )的顶点信息
{
	int adjvexNo;  // 边的某一个端点的编号
	/******************************************************************************************************
	    一个顶点可能 与 另外多个点 通过边进行连接， 这些点，可以通过链式存储，被完整的记录下来
       如 A 与 B、C、D 都相通， 那么 

	   A->firstEdgeNode = B;   
	                      B->nextArc = C;  
					                   C->nextArc = D;
		   					                        D->nextArc = NULL;
             B
           /
		  /
		A -- C      ( B -> C -> D -> NULL ) 可以完整地记录从 A出发的所有边的信息
		 \
		  \
		     D
	 *******************************************************************************************************/
	struct ArcNode* nextArcNode;
	int weight;
} ArcNode;

typedef struct VertexNode
{
	char detail[1024];  // 顶点的其他详细信息 , 如这个顶点表示一个城市，那么 detail 中就可以保存 城市的名称， 经纬度等 信息
	ArcNode* firstEdgeNode;
} VertexNode;

typedef struct AdjacentGraph
{
	VertexNode adjlist[MAX_VERTEX_COUNT];
	int n;  // 顶点个数
	int e;  // 边数
} AdjacentGraph;
