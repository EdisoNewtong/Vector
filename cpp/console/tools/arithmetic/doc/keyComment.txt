//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function Invoke Support
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. suffix expressions 
    if the program support function , the program will become more and more complicated.
Let's discuss it by an example :
    expr1 : fun( a    ) + 1     //  it's suffix expression :   | fun | a | 1 | + |
    expr2 : fun( a + 1)         //  it's suffix expression :   | fun | a | 1 | + |

It's ambiguous !!!!

Although awaring that both of the expressions have generated the same suffix expression, 
The evaluated value must be different from each other.


2. Function inside function ( Call-Stack )
   cos( sin( tan(30) ) )

	The argument can be generate by   other function's return value


3. the calling convention

	/***************************************************

	     int a = 1;

	     int add(int n1, int n2) { return n1+n2; }

	    C  Calling Conventsion  : add( a, a = 10);  =>   n1 <-  1,  n2 = 10 ,  return  1+10; return 11;
	      Std-Call Conventsion  : add( a, a = 10);  =>   n1 <- 10,  n2 = 10 ,  return 10+10; return 20;

	****************************************************/



4 . Let's make a protocol
     
	 int a = 0;
	 a = funcAdd(3,4);

Suffix Expression will be generated as the following :
					|   a   |   funcAdd   |   =   |

********************************************************************************************************************************************************************************************************
1.	The argument seperator operator ',' mustn't be appeared inside the final suffix expression
2.	The function arguments should be pushed to an argument list of a function object named "funcAdd"
3.  But the operator ',' who play the role of comma expression's seperator  can be existed inside the final suffix expression

( e.g.

    --------------------------------------------------
	        a = 3,4,5;

			a3=4,5,     // finally a = 3 rather than 5
		1st.             a=3  => 3
		2nd.             3,4  => 4
		3nd.             4,5  => 5

    --------------------------------------------------

	        a = (3,4,5);

			a34,5,=     // finally a = 5 rather than 3
		1st.             34,  => 4
		2nd.             4,5  => 5
		3nd.             a=5  => 5

    --------------------------------------------------
)

********************************************************************************************************************************************************************************************************
About the operator ','
There are 3 kinds of ',' in the c/c++ statement.

1. Play a role of function arguments seperator                                  :  e.g.      funcAdd(3,4);

2. Play a role of a sepeator of comma expression                                :  e.g.        num = 3,4;     // after the code has being executed , the varible num's value is 3 rather than 4 , finally it yield a tmp expresssion whose value is 4 
                                                                                          or   num = (3,4);   // after the code has being executed , the varible num's value is 4 rather than 3 , because of the ( ... ) promote the operator priority of ',' ( Comma )

3. Play a role of a seperator of alloc more than one varible for a new varible  : e.g.       int a,b;         // declare 2 varibles that ones' name is 'a' and the others' name is 'b' , and both of the values can be any arbirary value .
                                                                                             int a=3,b;       // declare 2 varibles that ones' name is 'a' and it's init value is 3 and the others' name is 'b' , b's value can be any arbirary value .
                                                                                             int a=4,b=4;     // declare 2 varibles that ones' name is 'a' and it's init value is 3 and the others' name is 'b' , b's value is 4 .

																							 int a=100;
																							 int b=a+1,200,c;      // compile error , '200' is not a valid varible name

																							 int b=(a+1,200),c;  // compile ok , b and c are both new alloced varibles , b's value is 100 because the statement ( 101,200 ) will generate tmp value 200 , 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Core Core Core :
    So from the previous example , you may be awared that the '(' play a critical role during the expression evaluation phase . 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   2023-06-26 , new features , support function call , and add ',' to the collection of the CharSet
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Support function invoke
//

//    Defined in header file <cmath>

// Variadic function
//--------------------------------
//       Basic operations   
//--------------------------------
abs(...)   
    float       abs( float arg );
    double      abs( double arg );
    long double abs( long double arg );
    float       fabs ( float arg );
    float       fabsf( float arg );
    double      fabs ( double arg );
    long double fabs ( long double arg );
    long double fabsl( long double arg );
    double      fabs ( IntegralType arg );


fmod(...)       
    float       fmod ( float x, float y );
    float       fmodf( float x, float y );
    double      fmod ( double x, double y );
    long double fmod ( long double x, long double y );
    long double fmodl( long double x, long double y );
    Promoted    fmod ( Arithmetic1 x, Arithmetic2 y );

remainder(...)
    float       remainder ( float x, float y );
    float       remainderf( float x, float y );
    double      remainder ( double x, double y );
    long double remainder ( long double x, long double y );
    long double remainderl( long double x, long double y );
    Promoted    remainder ( Arithmetic1 x, Arithmetic2 y );


fmax(...)  // pick the max value of two/three elements
    float       fmax( float x, float y)
    float       fmaxf( float x, float y)
    double      fmax( double x, double y)
    long double fmax( long double x, long double y)
    long double fmaxl( long double x, long double y)
    Promoted    fmax( Arithmetic1 x, Arithmetic2 y)

fmin(...)  // pick the min value of two/three elements
    float       fmin ( float x, float y );
    float       fminf( float x, float y );
    double      fmin ( double x, double y );
    long double fmin ( long double x, long double y );
    long double fminl( long double x, long double y );
    Promoted    fmin ( Arithmetic x, Arithmetic y );


//--------------------------------
//       Exponential functions
//--------------------------------
exp(...)        e^(arg)    // e.g.    e^2 = e*e;   e^3 = e*e*e;    e^4 = e*e*e*e;
    float       exp ( float arg );
    float       expf( float arg );
    double      exp ( double arg );
    long double exp ( long double arg );
    long double expl( long double arg );
    double      exp ( IntegralType arg );

exp2(...)        2^(arg)
    float       exp2 ( float n );
    float       exp2f( float n );
    double      exp2 ( double n );
    long double exp2 ( long double n );
    long double exp2l( long double n );
    double      exp2 ( IntegralType n );

log(...)        log  (arg)
                   10

    float       log ( float arg );
    float       logf( float arg );
    double      log ( double arg );
    long double log ( long double arg );
    long double logl( long double arg );
    double      log ( IntegralType arg );


log(...)        log  (arg)
                    2 

    float       log2 ( float arg );
    float       log2f( float arg );
    double      log2( double arg );
    long double log2( long double arg );
    long double log2l( long double arg );
    double      log2( IntegralType arg );


//--------------------------------
// Power functions
//--------------------------------
pow(...)             base^exp
    float       pow ( float base, float exp );
    float       powf( float base, float exp );
    double      pow ( double base, double exp );
    long double pow ( long double base, long double exp );
    long double powl( long double base, long double exp );
    float       pow ( float base, int iexp );
    double      pow ( double base, int iexp );
    long double pow ( long double base, int iexp );
    Promoted    pow ( Arithmetic1 base, Arithmetic2 exp );

sqrt(...)       sqrt(144)  ==> 12     //  12*12 = 144
    float       sqrt ( float arg );
    float       sqrtf( float arg );
    double      sqrt ( double arg );
    long double sqrt ( long double arg );
    long double sqrtl( long double arg );
    double      sqrt ( IntegralType arg );

cbrt(...)       cbrt(125) ==> 5        // 5*5*5 = 125
    float       cbrt ( float arg );
    float       cbrtf( float arg );
    double      cbrt ( double arg );
    long double cbrt ( long double arg );
    long double cbrtl( long double arg );
    double      cbrt ( IntegralType arg );


hypot(...)   // yield  ==>  sqrt( x*x + y*y)
    float       hypot ( float x, float y );
    float       hypotf( float x, float y );
    double      hypot ( double x, double y );
    long double hypot ( long double x, long double y );
    long double hypotl( long double x, long double y );
    Promoted    hypot ( Arithmetic1 x, Arithmetic2 y );
    float       hypot ( float x, float y, float z );
    double      hypot ( double x, double y, double z );
    long double hypot ( long double x, long double y, long double z );
    Promoted    hypot ( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z );


//--------------------------------
// Trigonometric functions
//--------------------------------

function(...)  :  sin / cos / tan /  asin / acos / atan 
    float       sin ( float arg );
    float       sinf( float arg );
    double      sin ( double arg );
    long double sin ( long double arg );
    long double sinl( long double arg );
    double      sin ( IntegralType arg );


atan(...)     ==> yield   the exp : arctan( y/x )
    float       atan2 ( float y, float x );
    float       atan2f( float y, float x );
    double      atan2 ( double y, double x );
    long double atan2 ( long double y, long double x );
    long double atan2l( long double y, long double x );
    Promoted    atan2 ( Arithmetic1 y, Arithmetic2 x );


// --------------------------------------------------
// Nearest integer floating point operations
/ /--------------------------------------------------
ceil(...)   // ceil(3.2) => 4    ceil( -3.2 ) => -3    // Computes the smallest interger value not less than arg
    float       ceil ( float arg );
    float       ceilf( float arg );
    double      ceil ( double arg );
    long double ceil ( long double arg );
    long double ceill( long double arg );
    double      ceil ( IntegralType arg );

floor(...)  // floor(3.2) => 3   floor( -3.2 ) => -4   //  Computes the largest integer value not greater than arg.
    float       floor ( float arg );
    float       floorf( float arg );
    double      floor ( double arg );
    long double floor ( long double arg );
    long double floorl( long double arg );
    double      floor ( IntegralType arg );

trunc(...)       trunc(3.5) => 3.0  trunc(-3.5) => -3    // Computes the nearest integer not greater in magnitude than arg. ( simplly cut down the float part after '.' )
    float       trunc ( float arg );
    float       truncf( float arg );
    double      trunc ( double arg );
    long double trunc ( long double arg );
    long double truncl( long double arg );
    double      trunc ( IntegralType arg );



/****************************************************************************************************

    round(+2.3) = 2  round(+2.5) = 3  round(+2.7) = 3
    round(-2.3) = -2  round(-2.5) = -3  round(-2.7) = -3
    round(-0.0) = -0
    round(-Inf) = -inf

****************************************************************************************************/
round(...)   
    float       round ( float arg );
    float       roundf( float arg );
    double      round ( double arg );
    long double round ( long double arg );
    long double roundl( long double arg );
    double      round ( IntegralType arg );
    long lround ( float arg );
    long lroundf( float arg );
    long lround ( double arg );
    long lround ( long double arg );
    long lroundl( long double arg );
    long lround ( IntegralType arg );
    long long llround ( float arg );
    long long llroundf( float arg );
    long long llround ( double arg );
    long long llround ( long double arg );
    long long llroundl( long double arg );
    long long llround ( IntegralType arg );