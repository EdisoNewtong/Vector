//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function Invoke Support
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. suffix expressions 
    if the program support function , the program will become more and more complicated.
Let's discuss it by an example :
    expr1 : fun( a    ) + 1     //  it's suffix expression :   | fun | a | 1 | + |
    expr2 : fun( a + 1)         //  it's suffix expression :   | fun | a | 1 | + |

It's ambiguous !!!!

Although awaring that both of the expressions have generated the same suffix expression, 
The evaluated value must be different from each other.


2. Function inside function ( Call-Stack )
   cos( sin( tan(30) ) )

	The argument can be generate by   other function's return value


3. the calling convention

	/***************************************************

	     int a = 1;

	     int add(int n1, int n2) { return n1+n2; }

	    C  Calling Conventsion  : add( a, a = 10);  =>   n1 <-  1,  n2 = 10 , calling add(1 ,10);  return  1+10; return 11;
	      Std-Call Conventsion  : add( a, a = 10);  =>   n1 <- 10,  n2 = 10 , calling add(10,10);  return 10+10; return 20;

	****************************************************/



4 . Let's make a protocol
     
	 int a = 0;
	 a = funcAdd(3,4);

Suffix Expression will be generated as the following ( The final suffix expression must contain neither the function arguments nor the open-close parenthesis pair which promote the operator's precess precedence ) :
########################################################################################################################################################################################################
#
# The final suffix expression must contain neither the function arguments nor the open-close parenthesis pair which promote the operator's precess precedence 
# ( In the other word, the function arguments should push into the member data of the function object. )
#
########################################################################################################################################################################################################
					|   a   |   funcAdd   |   =   |

********************************************************************************************************************************************************************************************************
1.	The argument seperator operator ',' mustn't be append inside the final suffix expression
2.	The function arguments should be pushed to an argument list of a function object whose name is "funcAdd" rather than the final suffix expression
3.  But the operator ',' who play the role of comma expression's operator can be existed inside the final suffix expression , such as  a=3,b,c; ( it will yield a = 3, 'b' and 'c' keep its original value )

( e.g.

    --------------------------------------------------
	        a = 3,4,5;

			a3=4,5,     // finally a = 3 rather than 5
		1st.             a=3  => 3
		2nd.             3,4  => 4
		3nd.             4,5  => 5

    --------------------------------------------------

	        a = (3,4,5);

			a34,5,=     // finally a = 5 rather than 3
		1st.             34,  => 4
		2nd.             4,5  => 5
		3nd.             a=5  => 5

    --------------------------------------------------
)

********************************************************************************************************************************************************************************************************
About the operator ','
There are 3 kinds of ',' in the c/c++ statement.

1. Play a role of function arguments seperator                                  :  e.g.      funcAdd(3,4);

2. Play a role of a sepeator of comma expression                                :  e.g.        num = 3,4;     // after the code has being executed , the varible num's value is 3 rather than 4 , finally it yield a tmp expresssion whose value is 4 
                                                                                          or   num = (3,4);   // after the code has being executed , the varible num's value is 4 rather than 3 , because of the ( ... ) promote the operator priority of ',' ( Comma )

3. Play a role of a seperator of alloc more than one varible for a new varible  : e.g.       int a,b;         // declare 2 varibles that ones' name is 'a' and the others' name is 'b' , and both of the values can be any arbirary value .
                                                                                             int a=3,b;       // declare 2 varibles that ones' name is 'a' and it's init value is 3 and the others' name is 'b' , b's value can be any arbirary value .
                                                                                             int a=4,b=4;     // declare 2 varibles that ones' name is 'a' and it's init value is 3 and the others' name is 'b' , b's value is 4 .

																							 int a=100;
																							 int b=a+1,200,c;      // compile error , '200' is not a valid varible name

																							 int b=(a+1,200),c;  // compile ok , b and c are both new alloced varibles , b's value is 100 because the statement ( 101,200 ) will generate tmp value 200 , 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Core Core Core :
    So from the previous example , you may be awared that the '(' play a critical role during the expression evaluation phase . 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




5. The code struct must be refactored because the evaluation part should be used not only in normal expression but also in function's argument .
   e.g.
        
        /*
            Here . 
                   1. aSum = ( aShipment + aPrice * aCount )                                           is a tmp expression that need to be evaluate before the function call 
                   2. bSum = ( bPrice * bCount >= 100 ? (bPrice * bCount - 15) : bPrice * bCount )     is a tmp expression that need to be evaluate before the function call 
        */

        int sumOf_a_b = add( aShipment + aPrice * aCount , bPrice * bCount >= 100 ? (bPrice * bCount - 15) : bPrice * bCount );

    ************************************************************************************************************************ 

          So evaluation module should be abstracted as a new class to meet the frequency amount of evaluation tasks *****
          Rather than put all the logic into the token manager ( class tokenMgr )

    ************************************************************************************************************************ 









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   2023-06-26 , new features , support function call , and add ',' to the collection of the CharSet
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Support function invoke
//

//    Defined in header file <cmath>

//
// Variadic function
//

--------------------------
| Built-in Function List |
--------------------------
// Basic
double abs(double arg);    // return   | arg |;
double fmod(double n1, double n2);    // return the remainder  :   n1 - ( static_cast<int>( n1/n2 ) * n2 );
double fmin(double n1, double n2);    // return the min one of (n1,n2)
double fmax(double n1, double n2);    // return the max one of (n1,n2)

// explog 
double exp(double exp);  // return e^(exp);  e.g. exp(3) => e*e*e;
double exp2(double exp);  // return 2^(exp);  e.g. exp2(4) => 2*2*2*2 = 16;
double log(double arg);  // return ln(arg);  e.g. log(e*e*e) = 3;
double log2(double arg);  // return log_2(arg);  e.g. log(2*2*2*2) = 4;
double log10(double arg);  // return log_10(arg);  e.g. log(1000) = 3;


// powSqrt
double pow(double base,double exp);  // return base^(exp);  e.g. exp(3,4) => 3*3*3*3 = 81
double sqrt(double arg);  // return arg^(1/2); e.g. sqrt(121) => 11
double cbrt(double arg);  // return arg^(1/3); e.g. cbrt(125) => 5
double hypot(double a,double b);  // return sqrt(  a*a + b*b );

// trigonometric
double sin(double radNum);  // return sin(rad);  sin(PI/6) => 0.5 
double cos(double radNum);  // return cos(rad);  sin(PI/3) => 0.5 
double tan(double radNum);  // return tan(rad);  sin(PI/4) => 1.0
double asin(double num); // return asin(num);  asin(0.5) => PI/6;
double acos(double num); // return acos(num);  acos(0.5) => PI/3;
double atan(double num); // return atan(num);  atan(1.0) => PI/4;
double atan2(double a,double b); // return atan(a/b);  atan2(3.0,3.0) => PI/4;

// nearest
double ceil(double n);  // return the min int number no less than n
double floor(double n); // return the max int number no greater than n
double trunc(double n); // return the int part of the float number
double round(double n); // return halfway case away from zero. round(2.3) => 2.0, round(2.5) => 3.0, round(2.7) => 3.0







