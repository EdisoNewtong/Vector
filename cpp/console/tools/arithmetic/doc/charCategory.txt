a-z A-Z   _                                                               // Alpha 

0-9                                                                       // Number Type

+    -    *    /    %    &    |    ^    ~    <<    >>    (    )    =      // Operator Type
+=   -=   */   /=   %=   &=   |=   ^=        <<=   >>=                    // Operator : Compound Assignment Type

.   ;                                                                     // Other Type

<Space>   <Tab>   <\r>    <\n>                                            // Blank Type


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Token Type
   Blank / Comment
   
   Int
      decimal / octal / hex
   
   Float
   Varible
   Operator 
   Semicolon ;













//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//
// unary operation
//
+  or -  
~


//
// binary operation
//
+     -     *    /     %   
+=    -=   *=    /=    %=

&      |     ^
&=     |=    ^=

<<     >>
<<=    >>=

=     //  varible-name = expr;



//
// binary operation
//
a-zA-Z0-9   _

( )  

;

<Space>   <Tab>   \r \n




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//   2023-06-26 , new features , support function call , and add ',' to the collection of the CharSet
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Support function invoke
//

// Variadic function
//--------------------------------
//       Basic operations   
//--------------------------------
abs(...)   
    float       abs( float arg );
    double      abs( double arg );
    long double abs( long double arg );
    Defined in header <cmath>
    float       fabs ( float arg );
    float       fabsf( float arg );
    double      fabs ( double arg );
    long double fabs ( long double arg );
    long double fabsl( long double arg );
    double      fabs ( IntegralType arg );


fmod(...)       
    float       fmod ( float x, float y );
    float       fmodf( float x, float y );
    double      fmod ( double x, double y );
    long double fmod ( long double x, long double y );
    long double fmodl( long double x, long double y );
    Promoted    fmod ( Arithmetic1 x, Arithmetic2 y );

remainder(...)
    float       remainder ( float x, float y );
    float       remainderf( float x, float y );
    double      remainder ( double x, double y );
    long double remainder ( long double x, long double y );
    long double remainderl( long double x, long double y );
    Promoted    remainder ( Arithmetic1 x, Arithmetic2 y );


fma(...)  // pick the max value of two/three elements
    float       fma ( float x, float y, float z );
    float       fmaf( float x, float y, float z );
    double      fma ( double x, double y, double z );
    long double fma ( long double x, long double y, long double z );
    long double fmal( long double x, long double y, long double z );
    Promoted    fma ( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z );

fmin(...)  // pick the min value of two/three elements
    float       fmin ( float x, float y );
    float       fminf( float x, float y );
    double      fmin ( double x, double y );
    long double fmin ( long double x, long double y );
    long double fminl( long double x, long double y );
    Promoted    fmin ( Arithmetic x, Arithmetic y );


//--------------------------------
//       Exponential functions
//--------------------------------
exp(...)        e^(arg)    // e.g.    e^2 = e*e;   e^3 = e*e*e;    e^4 = e*e*e*e;
    float       exp ( float arg );
    float       expf( float arg );
    double      exp ( double arg );
    long double exp ( long double arg );
    long double expl( long double arg );
    double      exp ( IntegralType arg );

exp2(...)        2^(arg)
    float       exp2 ( float n );
    float       exp2f( float n );
    double      exp2 ( double n );
    long double exp2 ( long double n );
    long double exp2l( long double n );
    double      exp2 ( IntegralType n );

log(...)        log  (arg)
                   10

    float       log ( float arg );
    float       logf( float arg );
    double      log ( double arg );
    long double log ( long double arg );
    long double logl( long double arg );
    double      log ( IntegralType arg );


log(...)        log  (arg)
                    2 

    float       log2 ( float arg );
    float       log2f( float arg );
    double      log2( double arg );
    long double log2( long double arg );
    long double log2l( long double arg );
    double      log2( IntegralType arg );


//--------------------------------
// Power functions
//--------------------------------
pow(...)             base^exp
    float       pow ( float base, float exp );
    float       powf( float base, float exp );
    double      pow ( double base, double exp );
    long double pow ( long double base, long double exp );
    long double powl( long double base, long double exp );
    float       pow ( float base, int iexp );
    double      pow ( double base, int iexp );
    long double pow ( long double base, int iexp );
    Promoted    pow ( Arithmetic1 base, Arithmetic2 exp );

sqrt(...)       sqrt(144)  ==> 12     //  12*12 = 144
    float       sqrt ( float arg );
    float       sqrtf( float arg );
    double      sqrt ( double arg );
    long double sqrt ( long double arg );
    long double sqrtl( long double arg );
    double      sqrt ( IntegralType arg );

cbrt(...)       cbrt(125) ==> 5        // 5*5*5 = 125
    float       cbrt ( float arg );
    float       cbrtf( float arg );
    double      cbrt ( double arg );
    long double cbrt ( long double arg );
    long double cbrtl( long double arg );
    double      cbrt ( IntegralType arg );


hypot(...)   // yield  ==>  sqrt( x*x + y*y)
    float       hypot ( float x, float y );
    float       hypotf( float x, float y );
    double      hypot ( double x, double y );
    long double hypot ( long double x, long double y );
    long double hypotl( long double x, long double y );
    Promoted    hypot ( Arithmetic1 x, Arithmetic2 y );
    float       hypot ( float x, float y, float z );
    double      hypot ( double x, double y, double z );
    long double hypot ( long double x, long double y, long double z );
    Promoted    hypot ( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z );


//--------------------------------
// Trigonometric functions
//--------------------------------

function(...)  :  sin / cos / tan /  asin / acos / atan 
    float       sin ( float arg );
    float       sinf( float arg );
    double      sin ( double arg );
    long double sin ( long double arg );
    long double sinl( long double arg );
    double      sin ( IntegralType arg );


atan(...)     ==> yield   the exp : arctan( y/x )
    float       atan2 ( float y, float x );
    float       atan2f( float y, float x );
    double      atan2 ( double y, double x );
    long double atan2 ( long double y, long double x );
    long double atan2l( long double y, long double x );
    Promoted    atan2 ( Arithmetic1 y, Arithmetic2 x );


// --------------------------------------------------
// Nearest integer floating point operations
/ /--------------------------------------------------
ceil(...)   // ceil(3.2) => 4    ceil( -3.2 ) => -3    // Computes the smallest interger value not less than arg
    float       ceil ( float arg );
    float       ceilf( float arg );
    double      ceil ( double arg );
    long double ceil ( long double arg );
    long double ceill( long double arg );
    double      ceil ( IntegralType arg );

floor(...)  // floor(3.2) => 3   floor( -3.2 ) => -4   //  Computes the largest integer value not greater than arg.
    float       floor ( float arg );
    float       floorf( float arg );
    double      floor ( double arg );
    long double floor ( long double arg );
    long double floorl( long double arg );
    double      floor ( IntegralType arg );

trunc(...)       trunc(3.5) => 3.0  trunc(-3.5) => -3    // Computes the nearest integer not greater in magnitude than arg. ( simplly cut down the float part after '.' )
    float       trunc ( float arg );
    float       truncf( float arg );
    double      trunc ( double arg );
    long double trunc ( long double arg );
    long double truncl( long double arg );
    double      trunc ( IntegralType arg );



/****************************************************************************************************

    round(+2.3) = 2  round(+2.5) = 3  round(+2.7) = 3
    round(-2.3) = -2  round(-2.5) = -3  round(-2.7) = -3
    round(-0.0) = -0
    round(-Inf) = -inf

****************************************************************************************************/
round(...)   
    float       round ( float arg );
    float       roundf( float arg );
    double      round ( double arg );
    long double round ( long double arg );
    long double roundl( long double arg );
    double      round ( IntegralType arg );
    long lround ( float arg );
    long lroundf( float arg );
    long lround ( double arg );
    long lround ( long double arg );
    long lroundl( long double arg );
    long lround ( IntegralType arg );
    long long llround ( float arg );
    long long llroundf( float arg );
    long long llround ( double arg );
    long long llround ( long double arg );
    long long llroundl( long double arg );
    long long llround ( IntegralType arg );


