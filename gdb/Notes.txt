//
// Core Core Core :
// Useful  arguments : -tui        ( a GUI  GDB with window )
//
$ gdb -tui   <Bin_File>
$ gdb <Bin_File>
$ gdb <Bin_File> <core_dump_file>
$ gdb --args <Bin_File> arg1 arg2 arg3 .... argn    // set boot up args


s -- Step program until it reaches a different source line

----------------------------------------------------------------------------------------------------
(gdb) file <ProgName>
(gdb) help (h)    // h break
(gdb) help <CommandName>
(gdb) apropos <KeyWord>


##################################################
break (b)
##################################################
(gdb) b LineNo                      // b 50
(gdb) b FileName:LineNo             // b main.cpp:50
(gdb) b Filename:FunctionName       // b main.cpp:test1
(gdb) b FunctionName                // b main

(gdb) b <location>  if  boolean expression  // b 50  if  i == 10


######################################################################################################################################################
tbreak     // Set a temporary breakpoint.  Like "break" except the breakpoint is only temporary
######################################################################################################################################################



(gdb) info breakpoints              // (i b)    display the breakpoints list
(gdb) enable  <Breakpoint No.>      // (en 1)   enable   a breakpoint specfied by No.
(gdb) disable <Breakpoint No.>      // (dis 1)  disable  a breakpoint specfied by No.
(gdb) delete  <Breakpoint No.>      // (d 1)    delete   a breakpoint specfied by No.
(gdb) delete  breakpoints           //          delete all breakpoints


######################################################################################################################################################
list // (l) -- List specified function or line
######################################################################################################################################################
(gdb) l LineNo                      // l 50
(gdb) l FileName:LineNo             // l main.cpp:50
(gdb) l Filename:FunctionName       // l main.cpp:test1
(gdb) l FunctionName                // l main


######################################################################################################################################################
print // (p) -- Print value of expression EXP  ( or set the value )
######################################################################################################################################################
(gdb) p i
(gdb) p/d i   // decimal format
(gdb) p/o i   // octal format
(gdb) p/x i   // hex format
(gdb) p/t i   // binary format
(gdb) p/f i   // float format
(gdb) p/s i   // string format
(gdb) p/b i   // byte format
(gdb) p  i=3  // set i's value   as   3


######################################################################################################################################################
next // (n)  -- Step program, proceeding through subroutine calls.
######################################################################################################################################################


######################################################################################################################################################
step // (s)  -- Step program, proceeding through subroutine calls.
######################################################################################################################################################
(gdb) s (N)  // if N is ommited , N = 1 by default
e.g.
int ret = funcAll( fun1(1),  fun2(2), fun3(3), fun4(4) );
(gdb) s 2    // skip fun4(...) , enter fun3(...) {   =>  code; }   


######################################################################################################################################################
until // (u)  -- Execute until the program reaches a source line greater than the current or a specified location (same args as break command) within the current frame. It's very useful when debugging loop
######################################################################################################################################################
     | int sum = 0;
=> 1 | for( int i = 1; i <= 50; ++i ) {
     |     sum += i;
=> 2 |     for( int j = 1; j <= 80; ++j ) {
     |        sum += j;
     |     }
 X2  |     --sum;
     | }
     | 
 X1  | cout << "sum = " << sum << endl;
(gdb) u // after execute 'u' command @ 1 , the code will stop @ location   X1
(gdb) u // after execute 'u' command @ 2 , the code will stop @ location   X2


######################################################################################################################################################
finish // (fin)  -- finish the current function
######################################################################################################################################################


############################################################################################################################################################################################################################################################################################################
return <retValue> // (ret <Value>) -- force make the current function return a specfied value , if retVal is not specfied , the program will execute as unexpected
############################################################################################################################################################################################################################################################################################################
(gdb) return 3


############################################################################################################################################################################################################################################################################################################
commands // (comm <BreakPoint No.>   Set commands to be executed when a breakpoint is hit.  Give breakpoint number as argument after "commands".
############################################################################################################################################################################################################################################################################################################
(gdb) commands 1
>p i
>p j
>end                       // end for commands list
// when breakpoint 1 is hit , print varible i and j


############################################################################################################################################################################################################################################################################################################
display // (disp expr)   Print value of expression EXP each time the program stops.
############################################################################################################################################################################################################################################################################################################
(gdb) disp sum


############################################################################################################################################################################################################################################################################################################
info // (i ... )
############################################################################################################################################################################################################################################################################################################
(gdb) i args     // print function argument-list
(gdb) i lo       // print local varible



############################################################################################################################################################################################################################################################################################################
backtrace(where) // (bt or whe)   up (up)/ down (do)
############################################################################################################################################################################################################################################################################################################




(gdb) set args  <arg1> <arg2> <arg3> ... <argn>    // set main arguments
############################################################################################################################################################################################################################################################################################################
show args
############################################################################################################################################################################################################################################################################################################




############################################################################################################################################################################################################################################################################################################
whatis // (wha) -- Print data type of expression EXP.
############################################################################################################################################################################################################################################################################################################
(gdb) whatis sum
(gdb) whatis push_back


############################################################################################################################################################################################################################################################################################################
ptype // (pt) -- Print definition of type TYPE.  
############################################################################################################################################################################################################################################################################################################
(gdb) ptype 




############################################################################################################################################################################################################################################################################################################
catch throw // throw c++ exception
############################################################################################################################################################################################################################################################################################################


(gdb) run  (r)     // run the program
(gdb) run  (r) arg1 arg2 argr3 ... argn   // run the program
(gdb) quit (q)     //  exit gdb
(gdb) set directories -- Set the search path for finding source files
